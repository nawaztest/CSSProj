//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSSDBLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CSSDBEntities : DbContext
    {
        public CSSDBEntities()
            : base("name=CSSDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CallLogging> CallLoggings { get; set; }
        public virtual DbSet<CountryMaster> CountryMasters { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<EngineerMaster> EngineerMasters { get; set; }
        public virtual DbSet<InstallationMaster> InstallationMasters { get; set; }
        public virtual DbSet<PrincipalMaster> PrincipalMasters { get; set; }
        public virtual DbSet<ProductMaster> ProductMasters { get; set; }
        public virtual DbSet<ProductVersion> ProductVersions { get; set; }
        public virtual DbSet<SiteSetupProductDetail> SiteSetupProductDetails { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int AddCustomer(string customerCode, string customerName, string contactPersonName, string addressLine1, string addressLine2, string addressLine3, string telephone1, string telephone2, string countryCode, string countryName, string fax1, string fax2, string email, string remarks, string customerType, string installationDate, string expiryDate)
        {
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var fax1Parameter = fax1 != null ?
                new ObjectParameter("Fax1", fax1) :
                new ObjectParameter("Fax1", typeof(string));
    
            var fax2Parameter = fax2 != null ?
                new ObjectParameter("Fax2", fax2) :
                new ObjectParameter("Fax2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var installationDateParameter = installationDate != null ?
                new ObjectParameter("InstallationDate", installationDate) :
                new ObjectParameter("InstallationDate", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomer", customerCodeParameter, customerNameParameter, contactPersonNameParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, telephone1Parameter, telephone2Parameter, countryCodeParameter, countryNameParameter, fax1Parameter, fax2Parameter, emailParameter, remarksParameter, customerTypeParameter, installationDateParameter, expiryDateParameter);
        }
    
        public virtual int UpdateCustomer(Nullable<int> id, string customerCode, string customerName, string contactPersonName, string addressLine1, string addressLine2, string addressLine3, string telephone1, string telephone2, string countryCode, string countryName, string fax1, string fax2, string email, string remarks, string customerType, string installationDate, string expiryDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var fax1Parameter = fax1 != null ?
                new ObjectParameter("Fax1", fax1) :
                new ObjectParameter("Fax1", typeof(string));
    
            var fax2Parameter = fax2 != null ?
                new ObjectParameter("Fax2", fax2) :
                new ObjectParameter("Fax2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var installationDateParameter = installationDate != null ?
                new ObjectParameter("InstallationDate", installationDate) :
                new ObjectParameter("InstallationDate", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", idParameter, customerCodeParameter, customerNameParameter, contactPersonNameParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, telephone1Parameter, telephone2Parameter, countryCodeParameter, countryNameParameter, fax1Parameter, fax2Parameter, emailParameter, remarksParameter, customerTypeParameter, installationDateParameter, expiryDateParameter);
        }
    }
}
